This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-05T17:29:01.850Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  controller.js
  form.js
  index.js
  model.js
  style.css
  template.html
  view.js
.gitignore
package.json
webpack.common.js
webpack.dev.js
webpack.prod.js

================================================================
Repository Files
================================================================

================
File: src/controller.js
================
import {View} from "./view";
import {Model} from "./model";

export class Controller {
    constructor () {
        this.view = new View(this);
        this.model = new Model();
    }

    formDataToModel(title, details, priority) {
        this.model.addTask(title, details, priority);
        //CHECK TO SEE IF TASK WAS ACTUALLY ADDED
        console.log(this.model.tasks);
    }
}

================
File: src/form.js
================
const root = document.getElementById('root');

const newTaskForm = () => {
    console.log('got this far!');
    const form = document.createElement('form');
    form.setAttribute('id', 'newTaskForm');
    const fieldset = document.createElement('fieldset');
    const legend = document.createElement('legend');
    legend.textContent = 'New Task';

    const titleWrapper = document.createElement('p');
    const titleLabel = document.createElement('label');
    titleLabel.setAttribute('for', 'title');

    const titleInput = document.createElement('input');
    titleInput.setAttribute('type', 'text');
    titleInput.setAttribute('name', 'title');
    titleInput.setAttribute('id', 'title');
    titleInput.setAttribute('placeholder', 'Task');

    const priorityWrapper = document.createElement('p');
    const priorityLabel = document.createElement('label');
    priorityLabel.setAttribute('for', 'priority');
    priorityLabel.textContent = 'Priority';

    const prioritySelector = document.createElement('select');
    prioritySelector.setAttribute('name', 'priority');
    prioritySelector.setAttribute('id', 'priority');
    prioritySelector.setAttribute('autocomplete', 'off');

    const priorityOption1 = document.createElement('option');
    priorityOption1.setAttribute('value', 'low');
    priorityOption1.textContent = 'low';
    const priorityOption2 = document.createElement('option');
    priorityOption2.setAttribute('value', 'medium');
    priorityOption2.textContent = 'medium';
    const priorityOption3 = document.createElement('option');
    priorityOption3.setAttribute('value', 'high');
    priorityOption3.textContent = 'high';

    const detailsWrapper = document.createElement('p');
    const detailsLabel = document.createElement('label');
    detailsLabel.setAttribute('for', 'details');

    const detailsInput = document.createElement('textarea');
    detailsInput.setAttribute('id', 'details');
    detailsInput.setAttribute('name', 'details');
    detailsInput.setAttribute('rows', 10);
    detailsInput.setAttribute('cols', 30);
    detailsInput.setAttribute('placeholder', 'Task details...');

    const submitButton = document.createElement('button');
    submitButton.setAttribute('type', 'submit');
    submitButton.textContent = 'SUBMIT';

    titleLabel.appendChild(titleInput);
    titleWrapper.appendChild(titleLabel);

    prioritySelector.appendChild(priorityOption1);
    prioritySelector.appendChild(priorityOption2);
    prioritySelector.appendChild(priorityOption3);
    priorityWrapper.appendChild(priorityLabel);
    priorityWrapper.appendChild(prioritySelector);

    detailsLabel.appendChild(detailsInput);
    detailsWrapper.appendChild(detailsLabel);

    fieldset.append(legend);
    fieldset.appendChild(titleWrapper);
    fieldset.appendChild(priorityWrapper);
    fieldset.appendChild(detailsWrapper);
    fieldset.appendChild(submitButton);

    form.appendChild(fieldset);
    root.appendChild(form);
}

export {newTaskForm}

================
File: src/index.js
================
import {Controller} from './controller.js';
import './style.css';

const app = new Controller();

//TODO currently the form remains open and will continue to add tasks
//when the NEW TASK button is pressed again more forms are created but
//tasks are no longer submitted correctly and the page is cleared when SUBMIT is pressed

================
File: src/model.js
================
export class Model {
    constructor() {
        this.tasks = [];
    }

    addTask(title, details, priority = 'low', project ='default', type='todo') {
        this.tasks.push({
            id: crypto.randomUUID(),
            type: type,
            title: title,
            details: details,
            priority: priority,
            project: project,
        });
    }

    getTaskIndex(uuid) {
        return (this.tasks.findIndex(task => task.id === uuid));
    }

    removeTask(uuid) {
        this.tasks.splice(this.getTaskIndex(uuid), 1);
    }

    editTask(uuid, details, priority, project) {
        const selectedTask = this.tasks[this.getTaskIndex(uuid)];
        selectedTask['details'] = details;
        selectedTask['priority'] = priority;
        selectedTask['project'] = project;
    }
}

================
File: src/style.css
================
body {
  background: hotpink;
}

.listContainer {
  border: 5px solid black;
  height: 500px;
  width: 300px;
}

================
File: src/template.html
================
<!DOCTYPE html>
<html lang="en-US">
	<head>
		<meta charset="utf-8">
		<title>TITLE GOES HERE</title>
		<link rel="stylesheet" href="style.css">
	</head>
	<body>
		<div id='root'>
			
		</div>
	</body>
</html>

================
File: src/view.js
================
import {newTaskForm} from "./form.js";
export class View {
    constructor(controller) {
        this.controller = controller;
        this.newTaskForm = newTaskForm;
        this.init();
    }

    init() {
        this.root = document.getElementById('root');
        this.newTaskButton = document.createElement('button');
        this.newTaskButton.textContent = 'NEW TASK';
        this.newTaskButton.setAttribute('type', 'button');
        this.newTaskButton.setAttribute('id', 'newTaskButton');
        this.root.appendChild(this.newTaskButton);
        this.newTaskButton.addEventListener('click', (event) => {
            this.newTaskForm();
            this.formSubmission();
        });
    }

    formSubmission() {
        const form = document.getElementById('newTaskForm');
        form.addEventListener('submit', (event) => {
            event.preventDefault();
            const title = document.querySelector('#title').value;
            const priority = document.querySelector('#priority').value;
            const details = document.querySelector('#details').value;
            this.controller.formDataToModel(title, details, priority);
        });
    }
}



//TODO Question: I am not sure how to connect the view and the model via the controller.

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
#dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

.test.js
test.js

.repopack-output.txt
repopack-output.txt

================
File: package.json
================
{
  "name": "lesson_tests",
  "version": "1.0.0",
  "main": "index.js",
    "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "webpack --config webpack.prod.js",
    "start": "webpack serve --open --config webpack.dev.js",
    "deploy": "git subtree push --prefix dist origin gh-pages"
  },
  "keywords": [],
  "author": "Peter Stevenson",
  "license": "MIT",
  "description": "",
  "devDependencies": {
    "css-loader": "^7.1.2",
    "html-loader": "^5.1.0",
    "html-webpack-plugin": "^5.6.0",
    "style-loader": "^4.0.0",
    "webpack": "^5.93.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.4",
    "webpack-merge": "^6.0.1"
  }
}

================
File: webpack.common.js
================
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
    clean: true,
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./src/template.html",
    }),
  ],
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.html$/i,
        use: ['html-loader'],
      },
      {
        test: /\.(png|svg|jpg|jpeg|gif)$/i,
        use: ['asset/resource'],
      },
    ],
  },
};

================
File: webpack.dev.js
================
const {merge} = require('webpack-merge');
const common = require('./webpack.common');

module.exports = merge(common, {
  mode: 'development',
  devtool: 'eval-source-map',
  devServer: {
    static: './dist',
    watchFiles: ['./src/*.html'],
  },
});

================
File: webpack.prod.js
================
const {merge} = require('webpack-merge');
const common = require('./webpack.common.js');

module.exports = merge(common, {
  mode: 'production',
  devtool: 'source-map',
})
